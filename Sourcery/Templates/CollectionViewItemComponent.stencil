import Cocoa
import Differific

{% for type in types.implementing.CollectionViewItemComponent %}
class {{type.name|replace:"View",""}}ViewController: NSViewController, Component {
  private let layout: NSCollectionViewFlowLayout
  private let dataSource: {{type.name|replace:"View",""}}DataSource
  lazy var scrollView = NSScrollView()
  let collectionView: NSCollectionView

  init(title: String? = nil,
       layout: NSCollectionViewFlowLayout,
       iconController: IconController,
       collectionView: NSCollectionView? = nil) {
    self.layout = layout
    self.dataSource = {{type.name|replace:"View",""}}DataSource(title: title, iconController: iconController)
    if let collectionView = collectionView {
      self.collectionView = collectionView
    } else {
      self.collectionView = NSCollectionView()
    }
    self.collectionView.collectionViewLayout = layout
    super.init(nibName: nil, bundle: nil)
    self.title = title
  }

  required init?(coder aDecoder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  // MARK: - View lifecycle

  override func loadView() {
    self.view = scrollView
    scrollView.documentView = collectionView
    collectionView.isSelectable = true
    collectionView.allowsMultipleSelection = true
    collectionView.allowsEmptySelection = false
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    collectionView.dataSource = dataSource
    let headerIdentifier = NSUserInterfaceItemIdentifier.init("{{type.name}}Header")
    collectionView.register(CollectionViewHeader.self,
                            forSupplementaryViewOfKind: NSCollectionView.elementKindSectionHeader,
                            withIdentifier: headerIdentifier)
    let itemIdentifier = NSUserInterfaceItemIdentifier.init("{{type.name}}")
    collectionView.register({{type.name}}.self, forItemWithIdentifier: itemIdentifier)
  }

  // MARK: - Public API

  func indexPath(for item: NSCollectionViewItem) -> IndexPath? {
    return collectionView.indexPath(for: item)
  }

  func model(at indexPath: IndexPath) -> {{type.name}}Model {
    return dataSource.model(at: indexPath)
  }

  func reload(with models: [{{type.name}}Model], completion: (() -> Void)? = nil) {
    layout.headerReferenceSize.height = title != nil && !models.isEmpty ? 40 : 0
    dataSource.reload(collectionView, with: models, then: completion)
  }
}

class {{type.name|replace:"View",""}}DataSource: NSObject, NSCollectionViewDataSource {

  private var title: String?
  private var models = [{{type.name}}Model]()
  private(set) var iconController: IconController

  init(title: String? = nil,
       models: [{{type.name}}Model] = [],
       iconController: IconController) {
    self.title = title
    self.models = models
    self.iconController = iconController
    super.init()
  }

  // MARK: - Public API

  func model(at indexPath: IndexPath) -> {{type.name}}Model {
    return models[indexPath.item]
  }

  func reload(_ collectionView: NSCollectionView,
              with models: [{{type.name}}Model],
              then handler: (() -> Void)? = nil) {
    let old = self.models
    let new = models
    let changes = DiffManager().diff(old, new)
    collectionView.reload(with: changes,
                          animations: false,
                          updateDataSource: { [weak self] in
                            guard let strongSelf = self else { return }
                            strongSelf.models = new
                          }, completion: handler)
  }

  // MARK: - NSCollectionViewDataSource

  func collectionView(_ collectionView: NSCollectionView, numberOfItemsInSection section: Int) -> Int {
    return models.count
  }

  func collectionView(_ collectionView: NSCollectionView,
                      viewForSupplementaryElementOfKind kind: NSCollectionView.SupplementaryElementKind,
                      at indexPath: IndexPath) -> NSView {
    let identifier = NSUserInterfaceItemIdentifier.init("{{type.name}}Header")
    let item = collectionView.makeSupplementaryView(ofKind: NSCollectionView.elementKindSectionHeader,
                                                    withIdentifier: identifier, for: indexPath)

    if let title = title, let header = item as? CollectionViewHeader {
      header.setText(title)
    }

    return item
  }

  func collectionView(_ collectionView: NSCollectionView, itemForRepresentedObjectAt indexPath: IndexPath) -> NSCollectionViewItem {
    let identifier = NSUserInterfaceItemIdentifier.init("{{type.name}}")
    let item = collectionView.makeItem(withIdentifier: identifier, for: indexPath)
    let model = self.model(at: indexPath)

    if let view = item as? {{type.name}} {
      {% for variable in type.variables %}
      {% for key, value in variable.annotations %}
      {% ifnot variable|annotated:"$RawBinding" %}
      {% if value.count > 1 %}
      view.{{key}} = {{value}}
      {% else %}
      {% for variableType in value %}
      view.{{variable.annotations[key][variableType]}}
      {% endfor %}
      {% endif %}
      {% else %}
      {{ value }}
      {% endif %}
      {% endfor %}
      {% endfor %}
    }

    return item
  }
}

struct {{type.name}}Model: Hashable {
  {% for variable in type.variables %}
  {% ifnot variable|annotated:"$RawBinding" %}
  {% for key, value in variable.annotations %}
  {% for variableType in variable.annotations[key] %}
  {{key}}: {{variableType}}
  {% endfor %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {% for key in type.annotations %}
  {{key}}: {{type.annotations[key]}}
  {% endfor %}
}

{% endfor %}
